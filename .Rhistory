)
ts_data <- ts(covid_sum, frequency = 52)
decomposition_result <- decompose(ts_data)
trend_component <- decomposition_result$trend
seasonal_component <- decomposition_result$seasonal
residual_component <- decomposition_result$residual # Not getting any results for some reason ???
# Plot the components
plot(trend_component, main = "Trend Component")
plot(seasonal_component, main = "Seasonal Component")
plot(residual_component, main = "Residual Component")
ts_data <- ts(covid_sum, frequency = 52)
# Autocorrelation plot
acf(ts_data, lag.max = 20)
# Partial autocorrelation plot
pacf(ts_data, lag.max = 20)
ts_data <- ts(covid_sum, frequency = 52)
variable <- ts_data[,2]
# Augmented Dickey-Fuller test
adf_test <- ur.df(variable, type = "trend", lags = 10)
library(forecast)
library(mice)
library(caret)
library(stats)
library(urca)
# Augmented Dickey-Fuller test
adf_test <- ur.df(variable, type = "trend", lags = 10)
summary(adf_test)
# Plot the components
plot(trend_component, main = "Trend Component")
plot(seasonal_component, main = "Seasonal Component")
plot(residual_component, main = "Residual Component")
help(ts)
decomposition_result <- decompose(ts_data)
View(decomposition_result)
View(covid_sum)
View(ts_data)
View(covid_sum)
library(tidyverse)
data <- read.csv("covid_clean.csv")
data <- read.csv("data/covid_clean.csv")
View(data)
data %>%
group_by(iso_code) %>%
select(iso_code) %>%
summarize(n_distinct(iso_code)) %>%
print(n=255)
US_data <- data %>%
filter(location == "United States")
View(US_data)
US_data <- data %>%
filter(iso_code == "USA")
# country's with the highest number of observations
data %>%
count(iso_code)
# country's with the highest number of observations
data %>%
count(iso_code) %>%
arrange(n)
# country's with the highest number of observations
data %>%
count(iso_code) %>%
arrange(-n)
library(tidymodels)
library(lubridate)
##################### feature engineering
fdata <- data %>%
mutate(datee = ymd(date))
##################### feature engineering
fdata <- data %>%
mutate(datee = ymd(date)) %>%
select(datee)
View(fdata)
class(fdata$datee)
##################### feature engineering
fdata <- data %>%
mutate(datee = ymd(date)) %>%
select(-date)
##################### feature engineering
fdata <- data %>%
mutate(datee = ymd(date)) %>%
select(-date) %>%
mutate(date = datee) %>%
select(-datee)
##################### feature engineering
fdata <- data %>%
mutate(datee = ymd(date)) %>%
select(-date) %>%
mutate(date = datee) %>%
select(-datee) %>%
relocate(date)
# class check
class(fdata$date)
# class check
class(fdata$iso_code)
# class check
class(fdata$date)
library(tidyverse)
library(tidymodels)
library(lubridate)
data <- read.csv("data/covid_clean.csv")
data %>%
group_by(iso_code) %>%
select(iso_code) %>%
summarize(n_distinct(iso_code)) %>%
print(n=255)
US_data <- data %>%
filter(iso_code == "USA")
# country's with the highest number of observations
data %>%
count(iso_code) %>%
arrange(-n)
##################### feature engineering
fdata <- data %>%
mutate(datee = ymd(date)) %>%
select(-date) %>%
mutate(date = datee) %>%
select(-datee) %>%
relocate(date)
# class check
class(fdata$date)
View(fdata)
#na's per column
colMeans(is.na(fdata))
#na's per column
as.tibble(colMeans(is.na(fdata)))
#na's per column
as_tibble(colMeans(is.na(fdata)))
#na's per column
colMeans(is.na(fdata))
help(funs)
#na's per column
fdata %>%
summarise_each(funs(100*mean(is.na(.))))
#na's per column
fdata %>%
across(funs(100*mean(is.na(.))))
#na's per column
colMeans(is.na(x))
#na's per column
colMeans(is.na(fdata))
#na's per column
as_tibble(colMeans(is.na(fdata)))
#na's per column
tibble(variable = names(colMeans(is.na(fdata))), na_mean = colMeans(is.na(fdata)))
#na's per column
nas <- tibble(variable = names(colMeans(is.na(fdata))), na_mean = colMeans(is.na(fdata)))
nas %>%
arrange(-na_mean)
nas %>%
arrange(-na_mean) %>%
print(n=70)
View(nas)
#na's per column
nas <- tibble(variable = names(colMeans(is.na(fdata))), pct_missing = colMeans(is.na(fdata)))
nas %>%
arrange(-na_mean) %>%
print(n=70)
nas %>%
arrange(-pct_missing) %>%
print(n=70)
# creating lag variables
gdata <- fdata %>%
group_by(iso_code) %>%
mutate(new_cases_2week_lag = lag(new_cases, n=2, default=NA))
View(gdata)
# creating lag variables
gdata <- fdata %>%
group_by(iso_code) %>%
mutate(new_cases_2week_lag = lag(new_cases, n=2, default=NA)) %>%
relocate(new_cases_2week_lag,.after = new_cases)
# creating lag variables
gdata <- fdata %>%
group_by(iso_code) %>%
mutate(new_cases_2week_lag = lag(new_cases, n=2, default=NA),
new_cases_6week_lag = lag(new_cases, n=6, default=NA)) %>%
relocate(new_cases_2week_lag,.after = new_cases) %>%
relocate(new_cases_6week_lag,.after = new_cases_2week_lag)
# creating lag variables
gdata <- fdata %>%
group_by(iso_code) %>%
#lags
mutate(new_cases_2week_lag = lag(new_cases, n=2, default=NA),
new_cases_6week_lag = lag(new_cases, n=6, default=NA),
new_deaths_2week_lag = lag(new_deaths, n=2, default=NA),
new_deaths_6week_lag = lag(new_deaths, n=6, default=NA)) %>%
relocate(new_cases_2week_lag,.after = new_cases) %>%
relocate(new_cases_6week_lag,.after = new_cases_2week_lag) %>%
relocate(new_deaths_2week_lag,.after = new_deaths) %>%
relocate(new_deaths_6week_lag,.after = new_deaths_2week_lag)
# creating lag variables, rolling windows, and date time features
mean_roll_6 <- rollify(mean, window = 6)
help(rollify)
??rollify
library(tibbletime)
library(tibbletime)
# creating lag variables, rolling windows, and date time features
mean_roll_6 <- rollify(mean, window = 6)
mean_roll_12 <- rollify(mean, window = 12)
gdata <- fdata %>%
group_by(iso_code) %>%
#lags
mutate(new_cases_2week_lag = lag(new_cases, n=2, default=NA),
new_cases_6week_lag = lag(new_cases, n=6, default=NA),
new_deaths_2week_lag = lag(new_deaths, n=2, default=NA),
new_deaths_6week_lag = lag(new_deaths, n=6, default=NA)) %>%
relocate(new_cases_2week_lag,.after = new_cases) %>%
relocate(new_cases_6week_lag,.after = new_cases_2week_lag) %>%
relocate(new_deaths_2week_lag,.after = new_deaths) %>%
relocate(new_deaths_6week_lag,.after = new_deaths_2week_lag) %>%
# rolling statistics
mutate(new_cases_6week_roll = mean_roll_6(new_cases),
new_cases_12week_roll = mean_roll_12(new_cases),
new_deaths_6week_roll = mean_roll_6(new_deaths),
new_deaths_12week_roll = mean_roll_12(new_deaths)) %>%
relocate(new_cases_2week_roll,.after = new_cases_6week_lag) %>%
relocate(new_cases_6week_roll,.after = new_cases_2week_roll) %>%
relocate(new_deaths_2week_roll,.after = new_deaths_6week_lag) %>%
relocate(new_deaths_6week_roll,.after = new_deaths_2week_roll)
gdata <- fdata %>%
group_by(iso_code) %>%
#lags
mutate(new_cases_2week_lag = lag(new_cases, n=2, default=NA),
new_cases_6week_lag = lag(new_cases, n=6, default=NA),
new_deaths_2week_lag = lag(new_deaths, n=2, default=NA),
new_deaths_6week_lag = lag(new_deaths, n=6, default=NA)) %>%
relocate(new_cases_2week_lag,.after = new_cases) %>%
relocate(new_cases_6week_lag,.after = new_cases_2week_lag) %>%
relocate(new_deaths_2week_lag,.after = new_deaths) %>%
relocate(new_deaths_6week_lag,.after = new_deaths_2week_lag) %>%
# rolling statistics
mutate(new_cases_6week_roll = mean_roll_6(new_cases),
new_cases_12week_roll = mean_roll_12(new_cases),
new_deaths_6week_roll = mean_roll_6(new_deaths),
new_deaths_12week_roll = mean_roll_12(new_deaths)) %>%
relocate(new_cases_6week_roll,.after = new_cases_6week_lag) %>%
relocate(new_cases_12week_roll,.after = new_cases_6week_roll) %>%
relocate(new_deaths_6week_roll,.after = new_deaths_6week_lag) %>%
relocate(new_deaths_12week_roll,.after = new_deaths_6week_roll)
gdata <- fdata %>%
group_by(iso_code) %>%
#lags
mutate(new_cases_2week_lag = lag(new_cases, n=2, default=NA),
new_cases_6week_lag = lag(new_cases, n=6, default=NA),
new_deaths_2week_lag = lag(new_deaths, n=2, default=NA),
new_deaths_6week_lag = lag(new_deaths, n=6, default=NA)) %>%
relocate(new_cases_2week_lag,.after = new_cases) %>%
relocate(new_cases_6week_lag,.after = new_cases_2week_lag) %>%
relocate(new_deaths_2week_lag,.after = new_deaths) %>%
relocate(new_deaths_6week_lag,.after = new_deaths_2week_lag) %>%
# rolling statistics
mutate(new_cases_6week_roll = mean_roll_6(new_cases),
new_cases_12week_roll = mean_roll_12(new_cases),
new_deaths_6week_roll = mean_roll_6(new_deaths),
new_deaths_12week_roll = mean_roll_12(new_deaths)) %>%
relocate(new_cases_6week_roll,.after = new_cases_6week_lag) %>%
relocate(new_cases_12week_roll,.after = new_cases_6week_roll) %>%
relocate(new_deaths_6week_roll,.after = new_deaths_6week_lag) %>%
relocate(new_deaths_12week_roll,.after = new_deaths_6week_roll) %>%
# date time features
mutate(month = month(date))
gdata <- fdata %>%
group_by(iso_code) %>%
#lags
mutate(new_cases_2week_lag = lag(new_cases, n=2, default=NA),
new_cases_6week_lag = lag(new_cases, n=6, default=NA),
new_deaths_2week_lag = lag(new_deaths, n=2, default=NA),
new_deaths_6week_lag = lag(new_deaths, n=6, default=NA)) %>%
relocate(new_cases_2week_lag,.after = new_cases) %>%
relocate(new_cases_6week_lag,.after = new_cases_2week_lag) %>%
relocate(new_deaths_2week_lag,.after = new_deaths) %>%
relocate(new_deaths_6week_lag,.after = new_deaths_2week_lag) %>%
# rolling statistics
mutate(new_cases_6week_roll = mean_roll_6(new_cases),
new_cases_12week_roll = mean_roll_12(new_cases),
new_deaths_6week_roll = mean_roll_6(new_deaths),
new_deaths_12week_roll = mean_roll_12(new_deaths)) %>%
relocate(new_cases_6week_roll,.after = new_cases_6week_lag) %>%
relocate(new_cases_12week_roll,.after = new_cases_6week_roll) %>%
relocate(new_deaths_6week_roll,.after = new_deaths_6week_lag) %>%
relocate(new_deaths_12week_roll,.after = new_deaths_6week_roll) %>%
# date time features
mutate(month = lubridate::month(date))
gdata <- fdata %>%
group_by(iso_code) %>%
#lags
mutate(new_cases_2week_lag = lag(new_cases, n=2, default=NA),
new_cases_6week_lag = lag(new_cases, n=6, default=NA),
new_deaths_2week_lag = lag(new_deaths, n=2, default=NA),
new_deaths_6week_lag = lag(new_deaths, n=6, default=NA)) %>%
relocate(new_cases_2week_lag,.after = new_cases) %>%
relocate(new_cases_6week_lag,.after = new_cases_2week_lag) %>%
relocate(new_deaths_2week_lag,.after = new_deaths) %>%
relocate(new_deaths_6week_lag,.after = new_deaths_2week_lag) %>%
# rolling statistics
mutate(new_cases_6week_roll = mean_roll_6(new_cases),
new_cases_12week_roll = mean_roll_12(new_cases),
new_deaths_6week_roll = mean_roll_6(new_deaths),
new_deaths_12week_roll = mean_roll_12(new_deaths)) %>%
relocate(new_cases_6week_roll,.after = new_cases_6week_lag) %>%
relocate(new_cases_12week_roll,.after = new_cases_6week_roll) %>%
relocate(new_deaths_6week_roll,.after = new_deaths_6week_lag) %>%
relocate(new_deaths_12week_roll,.after = new_deaths_6week_roll) %>%
# date time features
mutate(month = lubridate::month(date),
week = lubridate::week(date))
write_csv(gdata, file = "data/covid_clean_lags.csv")
library(tidyverse)
library(tidymodels)
library(skimr)
library(forecast)
library(mice)
library(caret)
library(stats)
library(urca)
library(tidyverse)
library(tidymodels)
library(skimr)
library(forecast)
library(mice)
library(caret)
library(stats)
library(urca)
load(file = "data/covid_clean.rda")
# don't have this rda on my local so added csv - Alex
read_csv("covid_clean_lags.csv")
# don't have this rda on my local so added csv read - Alex
read_csv("covid_clean_lags.csv")
# don't have this rda on my local so added csv read - Alex
covid_clean <- read_csv("covid_clean_lags.csv")
covid_sum <- covid_clean %>%
filter(
date < "2024-01-01"
) %>%
group_by(date) %>%
select(date, new_cases) %>%
summarise(
num_cases = sum(new_cases, na.rm = T)
)
ts_data <- ts(covid_sum, frequency = 52)
variable <- ts_data[,2]
# Augmented Dickey-Fuller test
adf_test <- ur.df(variable, type = "trend", lags = 10)
summary(adf_test)
library(tseries)
# alternate method for Augmented Dickey-Fuller test. Was slightly confused by
# the summary results above
adf.test(covid_clean$new_cases)
library(tidyverse)
library(tidymodels)
library(lubridate)
library(tibbletime)
#na's per column
nas <- tibble(variable = names(colMeans(is.na(fdata))), pct_missing = colMeans(is.na(fdata)))
nas %>%
arrange(-pct_missing) %>%
print(n=70)
# country's with the highest number of observations
data %>%
count(iso_code) %>%
arrange(-n)
##################### feature engineering
# date as date class
fdata <- data %>%
mutate(datee = ymd(date)) %>%
select(-date) %>%
mutate(date = datee) %>%
select(-datee) %>%
relocate(date)
library(lubridate)
##################### feature engineering
# date as date class
fdata <- data %>%
mutate(datee = ymd(date)) %>%
select(-date) %>%
mutate(date = datee) %>%
select(-datee) %>%
relocate(date)
##################### feature engineering
# date as date class
fdata <- data %>%
mutate(datee = lubridate::ymd(date)) %>%
select(-date) %>%
mutate(date = datee) %>%
select(-datee) %>%
relocate(date)
fdata %>%
select(date, new_cases, reproduction_rate)
# country's with the highest number of observations
data %>%
count(iso_code) %>%
arrange(-n)
# country's with the highest number of observations
data %>%
count(location) %>%
filter(location == "China")
library(tidyverse)
library(tidymodels)
library(lubridate)
library(tibbletime)
data <- read.csv("data/covid_clean.csv")
data %>%
group_by(iso_code) %>%
select(iso_code) %>%
summarize(n_distinct(iso_code)) %>%
print(n=255)
US_data <- data %>%
filter(iso_code == "USA")
# country's with the highest number of observations
data %>%
count(location) %>%
filter(location == "China") %>%
arrange(-n)
##################### feature engineering
# date as date class
fdata <- data %>%
mutate(datee = lubridate::ymd(date)) %>%
select(-date) %>%
mutate(date = datee) %>%
select(-datee) %>%
relocate(date)
# class check
class(fdata$date)
#na's per column
nas <- tibble(variable = names(colMeans(is.na(fdata))), pct_missing = colMeans(is.na(fdata)))
nas %>%
arrange(-pct_missing) %>%
print(n=70)
source("~/Docs/Documents/Northwestern classes1/Stat390/390 Final Alex git/feature engineering.R", echo=TRUE)
# missing icu by country
fdata %>%
group_by(iso_code) %>%
summarize(na_count = sum(is.na(icu_patients)))
# missing icu by country
fdata %>%
group_by(iso_code) %>%
summarize(na_count = sum(is.na(icu_patients)) / count(icu_patients)) %>%
arrange()
# missing icu by country
fdata %>%
group_by(iso_code) %>%
summarize(na_count = sum(is.na(icu_patients)) / count(icu_patients))
# missing icu by country
fdata %>%
group_by(iso_code) %>%
summarize(na_count = sum(is.na(icu_patients)) / count(iso_code))
# missing icu by country
fdata %>%
group_by(iso_code) %>%
summarize(na_count = sum(is.na(icu_patients)) / tally(icu_patients))
# missing icu by country
fdata %>%
group_by(iso_code) %>%
summarize(na_count = sum(is.na(icu_patients)) / tally(iso_patients))
# missing icu by country
fdata %>%
group_by(iso_code) %>%
summarize(na_count = sum(is.na(icu_patients)) / tally(icu_patients))
# missing icu by country
fdata %>%
group_by(iso_code) %>%
summarize(na_count = sum(is.na(icu_patients)))
# missing icu by country
fdata %>%
group_by(iso_code) %>%
summarize(na_count = sum(is.na(icu_patients))) %>%
arrange(-na_count)
# missing icu by country
fdata %>%
group_by(iso_code) %>%
summarize(na_count = sum(is.na(icu_patients))) %>%
arrange(na_count)
# missing icu by country
fdata %>%
group_by(iso_code) %>%
summarize(na_count = sum(is.na(icu_patients))) %>%
arrange(na_count) %>%
print(n=40)
fdata %>%
group_by(iso_code) %>%
summarize(na_count = sum(is.na(hosp_patients))) %>%
arrange(na_count) %>%
print(n=40)
# missing icu by country
fdata %>%
group_by(iso_code) %>%
summarize(na_count = mean(is.na(icu_patients))) %>%
arrange(na_count) %>%
print(n=40)
# missing hosp_patients
fdata %>%
group_by(iso_code) %>%
summarize(na_count = mean(is.na(hosp_patients))) %>%
arrange(na_count) %>%
print(n=40)
# missing icu by country
fdata %>%
group_by(iso_code) %>%
summarize(na_pct = mean(is.na(icu_patients))) %>%
arrange(na_count) %>%
print(n=40)
# missing icu by country
fdata %>%
group_by(iso_code) %>%
summarize(na_pct = mean(is.na(icu_patients))) %>%
arrange(na_pct) %>%
print(n=40)
# missing hosp_patients
fdata %>%
group_by(iso_code) %>%
summarize(na_pct = mean(is.na(hosp_patients))) %>%
arrange(na_pct) %>%
print(n=40)
